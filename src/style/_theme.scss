@import 'palettes';

@function br-color($palette, $hue: default, $opacity: 1) {
  // allow this function to be called with just $palette and $opacity
  // to achieve this check the $hue values match opacity value range
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return br-color($palette, default, $hue);
  }
  $color: map-get($palette, $hue);
  $opacity: if(opacity($color) < 1, opacity($color), $opacity);
  @return rgba($color, $opacity);
}

@function br-palette($palette, $default: 500, $lighter: 100, $darker: 700) {
  $result: map_merge($palette, (
    default: map-get($palette, $default),
    lighter: map-get($palette, $lighter),
    darker: map-get($palette, $darker),
    default-contrast: br-contrast($palette, $default),
    lighter-contrast: br-contrast($palette, $lighter),
    darker-contrast: br-contrast($palette, $darker)
  ));

  @each $hue, $color in $palette {
    $result: map_merge($result, (
      '#{$hue}-contrast': br-contrast($palette, $hue)
    ));
  }

  @return $result;
}

@function br-contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

// Creates a container object for a light theme to be given to individual component theme mixins.
@function br-light-theme($primary, $accent, $warn: br-palette($br-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $br-light-theme-foreground,
    background: $br-light-theme-background,
  );
}


// Creates a container object for a dark theme to be given to individual component theme mixins.
@function br-dark-theme($primary, $accent, $warn: br-palette($br-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: $br-dark-theme-foreground,
    background: $br-dark-theme-background,
  );
}
